//Neo4j imports
//Account
CREATE CONSTRAINT ON (a:Account) ASSERT a.accountId IS UNIQUE;
CREATE INDEX ON :Account(accountId);

LOAD CSV FROM '/usr/lib/memgraph/import/Account.csv'  WITH HEADER AS row
CREATE (a:Account {accountId: row.accountId}) SET a.createTime = localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime}), a.isBlocked = toBoolean(row.isBlocked), a.accountType = row.accountType, a.nickname = row.nickname, a.phonenum = toString(row.phonenum), a.email = row.email, a.freqLoginType = row.freqLoginType, a.lastLoginTime = toInteger(row.lastLoginTime), a.accountLevel = row.accountLevel;

//Medium
CREATE CONSTRAINT ON (m:Medium) ASSERT m.mediumId IS UNIQUE;
CREATE INDEX ON :Medium(mediumId);

LOAD CSV FROM '/usr/lib/memgraph/import/Medium.CSV'  WITH HEADER AS row
CREATE (m:Medium {mediumId: row.mediumId}) SET m.mediumType = row.mediumType, m.isBlocked = toBoolean(row.isBlocked), m.createTime = localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime}), m.lastLoginTime = toInteger(row.lastLoginTime), m.riskLevel = row.riskLevel;

//Person
CREATE CONSTRAINT ON (p:Person) ASSERT p.personId IS UNIQUE;
CREATE INDEX ON :Person(personId);

LOAD CSV FROM '/usr/lib/memgraph/import/Person.CSV'  WITH HEADER AS row
CREATE (p:Person {personId: row.personId}) SET p.personName = row.personName, p.isBlocked = toBoolean(row.isBlocked), p.createTime = localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime}), p.gender = row.gender, p.birthday = date(row.birthday), p.country = row.country, p.city = row.city;

//Loan
CREATE CONSTRAINT ON (l:Loan) ASSERT l.loanId IS UNIQUE;
CREATE INDEX ON :Loan(loanId);

LOAD CSV FROM '/usr/lib/memgraph/import/Loan.CSV' WITH HEADER AS row
CREATE (l:Loan {loanId: row.loanId}) SET l.loanAmount = toFloat(row. loanAmount), l.balance = toFloat(row.balance), l.createTime = localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime}), l.loanUsage = row.loanUsage, l.interestRate = toFloat(row.interestRate);

//Company
CREATE CONSTRAINT ON (c:Company) ASSERT c.companyId IS UNIQUE;
CREATE INDEX ON :Company(companyId);

LOAD CSV FROM '/usr/lib/memgraph/import/Company.CSV' WITH HEADER AS row
CREATE (c:Company {companyId: row.companyId}) SET c.companyName = row. companyName, c.isBlocked = toBoolean(row.isBlocked), c.createTime = localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime}), c.country = row.country, c.city = row.city, c.business = row.business, c.description = row.description, c.url = row.url;




//AccountRepayLoan
LOAD CSV FROM '/usr/lib/memgraph/import/AccountRepayLoan.CSV' WITH HEADER AS row 
Match (a:Account{accountId: row.accountId})
Match (l:Loan{loanId: row.loanId})
CREATE (a)-[:repay {amount: toFloat(row.amount), createTime: localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime})}]->(l);

//AccountTransferAccount
LOAD CSV FROM '/usr/lib/memgraph/import/AccountTransferAccount.CSV' WITH HEADER AS row
Match (a1:Account{accountId: row.fromId})
Match (a2:Account{accountId: row.toId})
CREATE (a1)-[:transfer {amount: toFloat(row.amount), createTime: localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime}), orderNum: row.orderNum, comment: row.comment, payType: row.payType, goodsType: row.goodsType}]->(a2);

//AccountWithdrawAccount
LOAD CSV FROM '/usr/lib/memgraph/import/AccountWithdrawAccount.CSV' WITH HEADER AS row
Match (a1:Account{accountId: row.fromId})
Match (a2:Account{accountId: row.toId})
CREATE (a1)-[:withdraw {amount: toFloat(row.amount), createTime: localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime})}]->(a2);


//CompanyApplyLoan
LOAD CSV FROM '/usr/lib/memgraph/import/CompanyApplyLoan.CSV' WITH HEADER AS row  
Match (c:Company{companyId: row.companyId})
Match (l:Loan{loanId: row.loanId})
CREATE (c)-[:apply {createTime: localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime}), org: row.org}]->(l); 

//CompanyGuaranteeCompany
LOAD CSV FROM '/usr/lib/memgraph/import/CompanyGuaranteeCompany.CSV' WITH HEADER AS row 
Match (c1:Company{companyId: row.fromId})
Match (c2:Company{ companyId: row. toId})
CREATE (c1)-[:guarantee {createTime: localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime}), relation: row.relation}]->(c2);

//CompanyInvestCompany
LOAD CSV FROM '/usr/lib/memgraph/import/CompanyInvestCompany.CSV' WITH HEADER AS row
Match (c1:Company{companyId: row.investorId})
Match (c2:Company{ companyId: row. companyId})
CREATE (c1)-[:invest {ratio: toFloat(row.ratio), createTime: localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime})}]->(c2);

//CompanyOwnAccount
LOAD CSV FROM '/usr/lib/memgraph/import/CompanyOwnAccount.CSV' WITH HEADER AS row 
Match (c:Company{companyId: row.companyId})
Match (a:Account{accountId: row.accountId})
CREATE (c)-[:own {createTime: localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime})}]->(a);


//LoanDepositAccount
LOAD CSV FROM '/usr/lib/memgraph/import/LoanDepositAccount.CSV' WITH HEADER AS row 
Match (l:Loan{loanId: row.loanId})
Match (a:Account{accountId: row.accountId})
CREATE (l)-[:deposit {amount: toFloat(row.amount), createTime: localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime})}]->(a);


//MediumSignInAccount
LOAD CSV FROM '/usr/lib/memgraph/import/MediumSignInAccount.CSV' WITH HEADER AS row  
Match (m:Medium{mediumId: row.mediumId})
Match (a:Account{accountId: row.accountId})
CREATE (m)-[:signIn {createTime: localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime}), location: row.location}]->(a);


//PersonApplyLoan
LOAD CSV FROM '/usr/lib/memgraph/import/PersonApplyLoan.CSV' WITH HEADER AS row 
Match (p:Person{personId: row.personId})
Match (l:Loan{loanId: row.loanId})
CREATE (p)-[:apply {createTime: localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime}), org: row.org}]->(l);



//PersonGuaranteePerson
LOAD CSV FROM '/usr/lib/memgraph/import/PersonGuaranteePerson.CSV' WITH HEADER AS row
Match (p1:Person{personId: row.fromId})
Match (p2:Person{personId: row.toId})
CREATE (p1)-[:guarantee {createTime: localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime}), relation: row.relation}]->(p2);

//PersonInvestCompany
LOAD CSV FROM '/usr/lib/memgraph/import/PersonInvestCompany.CSV' WITH HEADER AS row
Match (p:Person{personId: row.investorId})
Match (c:Company{companyId: row.companyId})
CREATE (p)-[:invest {ratio: toFloat(row.ratio), createTime: localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime})}]->(c);

//PersonOwnAccount
LOAD CSV FROM '/usr/lib/memgraph/import/PersonOwnAccount.CSV' WITH HEADER AS row 
Match (p:Person{personId: row.personId})
Match (a:Account{accountId: row.accountId})
CREATE (p)-[:own {createTime: localDateTime("1970-01-01T00:00:00")+duration({millisecond:row.createTime})}]->(a);
